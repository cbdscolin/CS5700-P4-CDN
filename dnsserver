#!/usr/bin/env python3
from dnslib.server import BaseResolver, DNSLogger, DNSRecord, DNSServer
from dnslib import RCODE, RR, A
import argparse
import os
import time
from utils.util import Utils
from geo_ip_locator import GeoIPLocator

parser = argparse.ArgumentParser()
parser.add_argument("-p", default=40002)
parser.add_argument("-n", default="cs5700cdnorigin.ccs.neu.edu")
args = parser.parse_args()
port = int(args.p)
name = args.n

abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)
geo_ip_locator = GeoIPLocator()


# The resolver used to translate names into IP addresses
class DNSResolver(BaseResolver):

    # Constructor
    def __init__(self):
        # Index used for round robin algorithm
        self.curr_address = 0

    def resolve(self, request, handler):
        """
        Try to get the closest IP to the client. If the request succeeds use this IP to redirect the client.
        If we fail to find the closest IP then redirect client towards the replica based on round-robin algorithm.
        """
        try:
            closest_ip = geo_ip_locator.get_closest_ip(handler.client_address[0])
        except Exception as ex:
            print ("Resolve exception: ", ex)
            closest_ip = geo_ip_locator.replica_IPs[self.curr_address]
            # Increment the index to mimic round robin algorithm.
            self.curr_address = (self.curr_address + 1) % len(geo_ip_locator.replica_IPs)

        reply = request.reply()
        a = RR(name, rdata=A(closest_ip), ttl=0)
        reply.add_answer(a)
        return reply


# Start the server to run infinitely, using the resolver designed above
if __name__ == "__main__":

    resolver = DNSResolver()
    logger = DNSLogger(prefix=False)
    server = DNSServer(resolver, port=port, logger=logger)
    server.start()
    # server.stop()
